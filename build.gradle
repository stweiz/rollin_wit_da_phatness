plugins {
    id 'com.bmuschko.docker-remote-api' version '3.2.6'
    id 'idea'
    id 'java'
    id 'org.springframework.boot' version '2.0.1.RELEASE'
}

ext {
    dockerRegistryHost = 'docker-no-host'
}

description = "Rollin wit da phatness"
group = 'org.stweiz'
version = '1'

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-undertow:2.0.1.RELEASE'
    compile 'org.springframework.data:spring-data-jpa'
    compile 'org.springframework.security:spring-security-web:5.0.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:5.0.3.RELEASE'

    runtime 'org.postgresql:postgresql:42.2.2'
}


configurations {
    all {
        compile {
            exclude module: 'spring-boot-starter-tomcat'
            exclude group: 'org.apache.tomcat'
        }
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.description,
                'Implementation-Version': project.version
        )
    }
}

springBoot  {
    buildInfo()
}

// build docker image (see https://github.com/bmuschko/gradle-docker-plugin)
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:9-jre-slim'
    maintainer 'stweiz <stef.weiz@googlemail.com>'
    user '1000:1000'
    volume '/tmp'
    addFile(jar.archiveName, '/')
    environmentVariable('JAVA_OPTS', '""')
    entryPoint('sh', '-c', 'java $JAVA_OPTS -jar ' + jar.archiveName)
    exposePort 8080
}

task copyJarToDockerContext(type: Copy) {
    dependsOn bootJar
    from jar
    into 'build/docker/'
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn copyJarToDockerContext
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "$dockerRegistryHost/$project.name:$project.version"
    doLast {
        println tag
    }
}
